/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.gf.SmartUnitTest.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.gf.SmartUnitTest.service.impl.CalculatorServiceImpl;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CalculatorServiceImpl_SSTest extends CalculatorServiceImpl_SSTest_scaffolding {
// allCoveredLines:[7, 10, 15, 20, 25, 26, 27, 30]

  @Test(timeout = 4000)
  public void test_add_0()  throws Throwable  {
      //caseID:22cee994daa422dcc9c27b0d14c0ddc0
      //CoveredLines: [7, 10]
      //Input_0_int: 
      //Input_1_int: 1
      //Assert: assertEquals(0, method_result);
      
      CalculatorServiceImpl calculatorServiceImpl0 = new CalculatorServiceImpl();
      
      //Call method: add
      int int0 = calculatorServiceImpl0.add((-1), 1);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_divide_1()  throws Throwable  {
      //caseID:d6f769872498b5fb43bfb7209b120b86
      //CoveredLines: [7, 25, 30]
      //Input_0_int: 204
      //Input_1_int: 
      //Assert: assertEquals((-204), method_result);
      
      CalculatorServiceImpl calculatorServiceImpl0 = new CalculatorServiceImpl();
      
      //Call method: divide
      int int0 = calculatorServiceImpl0.divide(204, (-1));
      
      //Test Result Assert
      assertEquals((-204), int0);
  }

  @Test(timeout = 4000)
  public void test_divide_2()  throws Throwable  {
      //caseID:47c54bca2c2df0c94ce875a1c11f6810
      //CoveredLines: [7, 25, 26, 27]
      //Input_0_int: 1
      //Input_1_int: 0
      //Assert: assertEquals((-1), method_result);
      
      CalculatorServiceImpl calculatorServiceImpl0 = new CalculatorServiceImpl();
      
      //Call method: divide
      int int0 = calculatorServiceImpl0.divide(1, 0);
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_minus_3()  throws Throwable  {
      //caseID:95382e21290068d02660caa855613182
      //CoveredLines: [7, 15]
      //Input_0_int: 2688
      //Input_1_int: 884
      //Assert: assertEquals(1804, method_result);
      
      CalculatorServiceImpl calculatorServiceImpl0 = new CalculatorServiceImpl();
      
      //Call method: minus
      int int0 = calculatorServiceImpl0.minus(2688, 884);
      
      //Test Result Assert
      assertEquals(1804, int0);
  }

  @Test(timeout = 4000)
  public void test_multiply_4()  throws Throwable  {
      //caseID:1757e3c7697a68721380691cc61a72b6
      //CoveredLines: [7, 20]
      //Input_0_int: 1
      //Input_1_int: 
      //Assert: assertEquals((-1), method_result);
      
      CalculatorServiceImpl calculatorServiceImpl0 = new CalculatorServiceImpl();
      
      //Call method: multiply
      int int0 = calculatorServiceImpl0.multiply(1, (-1));
      
      //Test Result Assert
      assertEquals((-1), int0);
  }
}
