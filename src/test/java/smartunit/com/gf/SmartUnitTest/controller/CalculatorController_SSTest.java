/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.gf.SmartUnitTest.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.gf.SmartUnitTest.controller.CalculatorController;
import com.gf.SmartUnitTest.service.CalculatorService;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CalculatorController_SSTest extends CalculatorController_SSTest_scaffolding {
// allCoveredLines:[12, 20, 25, 30, 35]

  @Test(timeout = 4000)
  public void test_add_0()  throws Throwable  {
      //caseID:9784dd14bd1645dd5da9137003efdfd6
      //CoveredLines: [12, 20]
      //Input_0_int: 0
      //Input_1_int: 0
      //Assert: assertEquals(0, method_result);
      
      CalculatorController calculatorController0 = new CalculatorController();
      //mock calculatorService0
      CalculatorService calculatorService0 = mock(CalculatorService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(calculatorService0).add(anyInt() , anyInt());
      PrivateAccess.setVariable((Class<?>) CalculatorController.class, calculatorController0, "calculatorService", (Object) calculatorService0);
      
      //Call method: add
      int int0 = calculatorController0.add(0, 0);
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_divide_1()  throws Throwable  {
      //caseID:5e3de6c8097172caa9f45decef1034d3
      //CoveredLines: [12, 35]
      //Input_0_int: 
      //Input_1_int: 
      //Assert: assertEquals(0, method_result);
      
      CalculatorController calculatorController0 = new CalculatorController();
      //mock calculatorService0
      CalculatorService calculatorService0 = mock(CalculatorService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) CalculatorController.class, calculatorController0, "calculatorService", (Object) calculatorService0);
      
      //Call method: divide
      int int0 = calculatorController0.divide((-1), (-1));
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_minus_2()  throws Throwable  {
      //caseID:7ce0de8dc0a6a5e1c227ef3b80a97a9a
      //CoveredLines: [12, 25]
      //Input_0_int: 
      //Input_1_int: 
      //Assert: assertEquals((-1), method_result);
      
      CalculatorController calculatorController0 = new CalculatorController();
      //mock calculatorService0
      CalculatorService calculatorService0 = mock(CalculatorService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(calculatorService0).minus(anyInt() , anyInt());
      PrivateAccess.setVariable((Class<?>) CalculatorController.class, calculatorController0, "calculatorService", (Object) calculatorService0);
      
      //Call method: minus
      int int0 = calculatorController0.minus((-1), (-1));
      
      //Test Result Assert
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test_multiply_3()  throws Throwable  {
      //caseID:62075636a68f317574ce27e40e8010ba
      //CoveredLines: [12, 30]
      //Input_0_int: 6
      //Input_1_int: 6
      //Assert: assertEquals(6, method_result);
      
      CalculatorController calculatorController0 = new CalculatorController();
      //mock calculatorService0
      CalculatorService calculatorService0 = mock(CalculatorService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(6).when(calculatorService0).multiply(anyInt() , anyInt());
      PrivateAccess.setVariable((Class<?>) CalculatorController.class, calculatorController0, "calculatorService", (Object) calculatorService0);
      
      //Call method: multiply
      int int0 = calculatorController0.multiply(6, 6);
      
      //Test Result Assert
      assertEquals(6, int0);
  }
}
